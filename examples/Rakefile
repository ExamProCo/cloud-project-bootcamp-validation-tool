require_relative '../lib/cpbvt'
require 'dotenv'
require 'securerandom'
require 'fileutils'

#require 'json'
#require 'openai'

module Aws2023; end
require_relative 'aws_2023/specific_params.rb'
require_relative 'aws_2023/puller.rb'
require_relative 'aws_2023/validator.rb'

unless File.exist?('.env')
  raise "Did not find a .env file"
end
Dotenv.load

namespace :pull do
  task :aws_2023 do
    puts "pulling for: aws_2023 =="
    general_params = Cpbvt::Payloads::Aws::GeneralParams.new(
      project_scope: "aws-bootcamp-2023",
      run_uuid: "#{Time.now.to_i}-#{SecureRandom.uuid}",
      user_uuid: ENV['USER_UUID'],
      user_region: ENV['USER_AWS_REGION'],
      output_path: ENV['OUTPUT_PATH'],
      region: ENV['AWS_REGION'],
      aws_access_key_id: ENV['AWS_ACCESS_KEY_ID'],
      aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'],
      payloads_bucket: ENV['PAYLOADS_BUCKET']
    )

    specific_params = Aws2023::SpecificParams.new(
      naked_domain_name: 'cruddur.com'
    )

    Aws2023::Puller.run(
      general_params: general_params,
      specific_params: specific_params
    )
  end
end

namespace :validate do
  task :aws_2023 do
    glob_path = File.join(
      "/workspace",
      "cloud-project-bootcamp-validation-tool",
      "examples",
      "output",
      "aws-bootcamp-2023",
      "user-#{ENV['USER_UUID']}",
      "/*")
    run_uuids = Dir.glob(glob_path).map{|t| t.split('/').last.sub("run-","") }
    run_uuid = run_uuids.last

    puts "validating for: aws_2023 =="
    puts run_uuid
    Aws2023::Validator.run(
      project_scope: "aws-bootcamp-2023",
      run_uuid: run_uuid,
      user_uuid: ENV['USER_UUID'],
      output_path: ENV['OUTPUT_PATH'],
      region: ENV['AWS_REGION'],
      aws_access_key_id: ENV['AWS_ACCESS_KEY_ID'],
      aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'],
      payloads_bucket: ENV['PAYLOADS_BUCKET']
    )
  end
end

#task :chat do 
#  path = "/workspace/cloud-project-bootcamp-validation-tool/examples/output/aws-bootcamp-2023/user-da124fec-133b-45c5-8423-04b768c886c2/run-1685322793-80559fe1-534d-408c-b1c3-1628e3485d12/ca-central-1/ec2-describe-subnets.json"
#  data = File.read(path)
#  hash = JSON.parse(data)
#  json_data = JSON.generate(hash)
#
#  prompt = [
#    "Return the 'project_id' given the following JSON data:",
#    json_data
#  ].join("\n")
#
#  OpenAI.configure do |config|
#    config.access_token = ENV.fetch("OPENAI_ACCESS_TOKEN")
#    config.organization_id = ENV.fetch("OPENAI_ORGANIZATION_ID")
#  end
#  
#  client = OpenAI::Client.new
#  response = client.completions(
#    parameters: {
#      model: 'text-babbage-001',
#      prompt: prompt,
#      max_tokens: 64
#    }
#  )
#  puts response
#end